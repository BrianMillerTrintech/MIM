@model ToPage
@{
    ViewBag.Title = "Create";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container">
        <div class="row">

            <h4>Create Room</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.roomModel.region)

                    @Html.EditorFor(model => model.roomModel.region, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.roomModel.region, "", new { @class = "text-danger" })
                </div>


                <div class="col-md-4">
                    @Html.LabelFor(model => model.roomModel.area)
                    @Html.EditorFor(model => model.roomModel.area, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.roomModel.area, "", new { @class = "text-danger" })
                </div>


                <div class="col-md-4">
                    @Html.LabelFor(model => model.roomModel.areaId)
                    @Html.EditorFor(model => model.roomModel.areaId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.roomModel.areaId, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">

            <div class="form-group">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.roomModel.title)
                    @Html.EditorFor(model => model.roomModel.title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.roomModel.title, "", new { @class = "text-danger" })

                    @Html.LabelFor(model => model.roomModel.description, htmlAttributes: new { @class = "control-label" })
                    @Html.TextAreaFor(model => model.roomModel.description, 10, 20, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.roomModel.description, "", new { @class = "text-danger" })

                    @Html.LabelFor(model => model.roomModel.terrain)
                    @Html.EnumDropDownListFor(model => model.roomModel.terrain, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.roomModel.terrain, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <h2 class="page-header">Exits</h2>
                <p>Exits must have a name and can only be North, East, South, West, Up and Down. Double Check Region and Area Spelling. AreaId should be generated dynamically.</p>
             
                <a id="js-addExit-btn" href="javascript:void(0)" class="btn btn-sm btn-success">Add new exit</a>
                <br />
                <br />
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Region</th>
                            <th>Area</th>
                            <th>AreaId</th>
                        </tr>
                    </thead>
                    <tbody id="js-exit-table"></tbody>
                </table>

                </div>
            </div>
        <div class="row">
            <div id="js-addExit" style="display:none;">
                
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.exitModel.name)
                            @Html.EditorFor(model => model.exitModel.name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.exitModel.name, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-3">
                            @Html.LabelFor(model => model.exitModel.region, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.exitModel.region, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.exitModel.region, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.exitModel.area)
                            @Html.EditorFor(model => model.exitModel.area, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.exitModel.area, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-3">
                            @Html.LabelFor(model => model.exitModel.areaId)
                            @Html.EditorFor(model => model.exitModel.areaId, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.exitModel.areaId, "", new { @class = "text-danger" })
                        </div>
                    </div>
             
                    <div class="form-group">
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.exitModel.locked)
                            @Html.CheckBoxFor(model => model.exitModel.locked)
                            @Html.ValidationMessageFor(model => model.exitModel.locked, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.exitModel.keyId)
                            @Html.EditorFor(model => model.exitModel.keyId, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.exitModel.keyId, "", new { @class = "text-danger" })
                        </div>

                    </div>

                    
                    <a id="js-addExit-save" href="javascript:void(0)" class="btn btn-success">Add exit</a>
                </div>
        </div>


        <h2>Items in Room</h2>

        <p>None</p>

        <div class="row">
            <!-- ITEM -->
            <h2>Add Items</h2>

            <!-- Select ITem-->
            <div class="form-group">
                <div class="col-md-12">
                    <label for="listbox">Select Item</label>

                    <select name="listbox" id="listbox" class="form-control">
                        <option>Select item to add</option>
                        @foreach (var item in Model.itemSelect)
                        {

                            <option value="@item.name">
                                @item.name
                            </option>
                        }
                    </select>

                    <a href="javascript:void(0)">Add Item</a>
                    <a href="javascript:void(0)">Add a new Item</a>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- item name -->
            <div class="form-group">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.itemModel.name)

                    @Html.EditorFor(model => model.itemModel.name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.itemModel.name, "", new { @class = "text-danger" })


                    <!-- item type -->
                    //Always an object
                    @Html.LabelFor(model => model.itemModel.type)

                    @Html.EnumDropDownListFor(model => model.itemModel.type, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.itemModel.type, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <!-- If weapon show -->

        <div class="row">
            <!-- item dam min -->
            <div class="form-group">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.itemModel.stats.damMin)

                    @Html.EditorFor(model => model.itemModel.stats.damMin, new { htmlAttributes = new { @class = "form-control", @value = 0 } })
                    @Html.ValidationMessageFor(model => model.itemModel.stats.damMin, "", new { @class = "text-danger" })
                </div>


                <!-- item dam max -->
                <div class="col-md-4">
                    @Html.LabelFor(model => model.itemModel.stats.damMax)

                    @Html.EditorFor(model => model.itemModel.stats.damMax, new { htmlAttributes = new { @class = "form-control", @value = 0 } })
                    @Html.ValidationMessageFor(model => model.itemModel.stats.damMax, "", new { @class = "text-danger" })
                </div>


                <!-- item dam roll -->
                <div class="col-md-4">
                    @Html.LabelFor(model => model.itemModel.stats.damRoll)
                    @Html.EditorFor(model => model.itemModel.stats.damRoll, new { htmlAttributes = new { @class = "form-control", @value = 0 } })
                    @Html.ValidationMessageFor(model => model.itemModel.stats.damRoll, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <!-- item attack type -->
            <div class="form-group">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.itemModel.attackType)

                    @Html.EnumDropDownListFor(model => model.itemModel.attackType, "- Please select attack Type -", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.itemModel.attackType, "", new { @class = "text-danger" })
                </div>


                <!-- item weapon type -->
                <div class="col-md-4">
                    @Html.LabelFor(model => model.itemModel.weaponType)

                    @Html.EnumDropDownListFor(model => model.itemModel.weaponType, "- Please select attack Type -", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.itemModel.weaponType, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-4">
                    @Html.LabelFor(model => model.itemModel.slot)

                    @Html.EnumDropDownListFor(model => model.itemModel.eqSlot, "- Please select equipment slot -", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.itemModel.slot, "", new { @class = "text-danger" })


                </div>
            </div>
        </div>
        <!-- /If weapon show -->

        <div class="row">
            <!-- item min usage level -->
            <div class="form-group">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.itemModel.stats.minUsageLevel)

                    @Html.EditorFor(model => model.itemModel.stats.minUsageLevel, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.itemModel.stats.minUsageLevel, "", new { @class = "text-danger" })
                </div>


                <!-- item Equipable -->

                <div class="col-md-6">
                    @Html.LabelFor(model => model.itemModel.equipable)

                    @Html.CheckBoxFor(model => model.itemModel.equipable, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.itemModel.equipable, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <!-- item flags -->
            <div class="form-group">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.itemModel.itemFlags)
                    <hr />
                    <div class="row">
                        @{

                            foreach (var item in Enum.GetValues(Model.itemModel.itemFlags.GetType()))
                            {
                                <div class="col-xs-3">
                                    <div class="checkbox">
                                        <input type="checkbox" name="SelectedSources" value="@item">@item
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <!-- item damage type -->
            <div class="form-group">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.itemModel.damageType)
                    <hr />
                    <div class="row">
                        @{

                            foreach (var item in Enum.GetValues(Model.itemModel.damageType.GetType()))
                            {
                                <div class="col-xs-3">
                                    <div class="checkbox">
                                        <input type="checkbox" name="SelectedSources" value="@item">@item
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>


        <!-- descriptions -->
        <!-- item description look -->
        <div class="form-group">
            <div class="col-md-12">
                @Html.LabelFor(model => model.itemModel.description.look)

                @Html.TextAreaFor(model => model.itemModel.description.look, 5, 5, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.itemModel.description.look, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- item description examine -->
        <div class="form-group">
            <div class="col-md-12">
                @Html.LabelFor(model => model.itemModel.description.exam)

                @Html.TextAreaFor(model => model.itemModel.description.exam, 5, 5, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.itemModel.description.exam, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- item description room -->
        <div class="form-group">
            <div class="col-md-12">
                @Html.LabelFor(model => model.itemModel.description.room)

                @Html.TextAreaFor(model => model.itemModel.description.room, 5, 5, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.itemModel.description.room, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- item description taste -->
        <div class="form-group">
            <div class="col-md-12">
                @Html.LabelFor(model => model.itemModel.description.taste)

                @Html.TextAreaFor(model => model.itemModel.description.taste, 5, 5, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.itemModel.description.taste, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- item description touch -->
        <div class="form-group">
            <div class="col-md-12">
                @Html.LabelFor(model => model.itemModel.description.touch)

                @Html.TextAreaFor(model => model.itemModel.description.touch, 5, 5, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.itemModel.description.touch, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- item description smell -->
        <div class="form-group">
            <div class="col-md-12">
                @Html.LabelFor(model => model.itemModel.description.smell)

                @Html.TextAreaFor(model => model.itemModel.description.smell, 5, 5, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.itemModel.description.smell, "", new { @class = "text-danger" })
            </div>
        </div>

        <a id="js-AddItem" href="javascript:void(0)">Add Item</a>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>


    @Html.ActionLink("Back to List", "Index")
                            @section Scripts {
                                @Scripts.Render("~/bundles/jqueryval")

                                <script>
                                    $(function () {
                                        console.log("Loaded");

                                        //Add a new exit
                                        $("#js-addExit-btn").click(function () {

                                            console.log("Exit add button click");
                                            console.log("addExit is it visible: " + $('#js-addExit').is(":visible"));
                                            //Show / hide hidden Exit fields

                                            $("#js-addExit").toggle();


                                        });

                                        var exitsArray = [];

                                        //add exit to array and to table
                                        $("#js-addExit-save").click(function () {


                                            var exitData = {
                                                name: $("#exitModel_name").val(),
                                                region: $("#exitModel_region").val(),
                                                area: $("#exitModel_area").val(),
                                                areaId: $("#exitModel_areaId").val(),
                                            }

                                            exitsArray.push(exitData);

                                            var exitRow = '<tr class="js-exit-row"><td class="js-exit-name">' + exitData.name + '</td><td class="js-exit-Region">' + exitData.region + '</td><td class="js-exit-Area">' + exitData.area + '</td><td class="js-exit-AreaId">' + exitData.areaId + '</td></tr>';



                                            $("#js-exit-table").append(exitRow);

                                            $("#js-addExit").hide();

                                            //reset fields and hide Add exit section
                                            $("#exitModel_name").val('');
                                            $("#exitModel_region").val('');
                                            $("#exitModel_area").val('');
                                            $("#exitModel_areaId").val('');



                                        });
                                    });
                                </script>

                                <script>
                                    $("#js-AddItem").click(function () {
                                        alert("Handler for .click() called.");

                                        var data = {
                                            type: "object",
                                            location: "room",
                                            equipable: true,
                                            slot: "RightHand",
                                            name: "test Sword",
                                            actions: {
                                                container: false,
                                                wield: "wield"
                                            },
                                            description: {
                                                look: "You look at a short sword",
                                                exam: "You look closely at a short sword",
                                                room: "A short Sword is here."
                                            },
                                            stats: {
                                                damMin: 1,
                                                damMax: 5
                                            }
                                        };

                                        /*
                                            Push item data to an array and display under added Items
                                         */

                                        $.ajax({
                                            type: "POST",
                                            url: "/Room/addItem",
                                            content: "application/json; charset=utf-8",
                                            dataType: "json",
                                            data: data,
                                            success: function (d) {
                                                if (d.success == true)
                                                    alert("yay")
                                                else { }
                                            },
                                            error: function (xhr, textStatus, errorThrown) {
                                                // TODO: Show error
                                            }
                                        });

                                    });
                                </script>
                            }


                            }